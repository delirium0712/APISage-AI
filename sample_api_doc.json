{
  "source": "# Payment Processing API v2.1\n\n## Overview\n\nThe Payment Processing API provides secure, scalable payment processing capabilities for e-commerce applications, subscription services, and digital marketplaces.\n\n## Base URL\n```\nhttps://api.payments.com/v2.1\n```\n\n## Authentication\nAll API requests require authentication using API keys. Include the key in the Authorization header:\n```\nAuthorization: Bearer <your_api_key>\n```\n\n## Rate Limiting\n- **Standard Plan**: 1,000 requests per minute\n- **Professional Plan**: 10,000 requests per minute\n- **Enterprise Plan**: 100,000 requests per minute\n\n## Endpoints\n\n### Process Payment\n\n**POST** `/payments/process`\n\nProcess a new payment transaction.\n\n#### Request Headers\n- `Authorization`: Bearer token (required)\n- `Content-Type`: application/json\n- `X-Idempotency-Key`: Unique key for idempotency (required)\n\n#### Request Body\n```json\n{\n  \"amount\": 2999,\n  \"currency\": \"USD\",\n  \"payment_method\": {\n    \"type\": \"card\",\n    \"card\": {\n      \"number\": \"4242424242424242\",\n      \"exp_month\": 12,\n      \"exp_year\": 2025,\n      \"cvc\": \"123\"\n    }\n  },\n  \"description\": \"Premium subscription\",\n  \"metadata\": {\n    \"order_id\": \"ord_12345\",\n    \"customer_id\": \"cust_67890\"\n  }\n}\n```\n\n#### Response\n```json\n{\n  \"id\": \"pay_1234567890\",\n  \"status\": \"succeeded\",\n  \"amount\": 2999,\n  \"currency\": \"USD\",\n  \"created\": 1640995200,\n  \"payment_method\": {\n    \"type\": \"card\",\n    \"card\": {\n      \"brand\": \"visa\",\n      \"last4\": \"4242\",\n      \"exp_month\": 12,\n      \"exp_year\": 2025\n    }\n  },\n  \"description\": \"Premium subscription\",\n  \"metadata\": {\n    \"order_id\": \"ord_12345\",\n    \"customer_id\": \"cust_67890\"\n  }\n}\n```\n\n#### Status Codes\n- `200 OK`: Payment processed successfully\n- `400 Bad Request`: Invalid request data\n- `401 Unauthorized`: Invalid API key\n- `402 Payment Required`: Payment failed\n- `422 Unprocessable Entity`: Validation errors\n- `429 Too Many Requests`: Rate limit exceeded\n- `500 Internal Server Error`: Server error\n\n### Get Payment Details\n\n**GET** `/payments/{payment_id}`\n\nRetrieve detailed information about a specific payment.\n\n#### Parameters\n- `payment_id` (path, required): Unique payment identifier\n\n#### Response\n```json\n{\n  \"id\": \"pay_1234567890\",\n  \"status\": \"succeeded\",\n  \"amount\": 2999,\n  \"currency\": \"USD\",\n  \"created\": 1640995200,\n  \"updated\": 1640995200,\n  \"payment_method\": {\n    \"type\": \"card\",\n    \"card\": {\n      \"brand\": \"visa\",\n      \"last4\": \"4242\",\n      \"exp_month\": 12,\n      \"exp_year\": 2025\n    }\n  },\n  \"description\": \"Premium subscription\",\n  \"metadata\": {\n    \"order_id\": \"ord_12345\",\n    \"customer_id\": \"cust_67890\"\n  },\n  \"refunds\": [],\n  \"disputes\": []\n}\n```\n\n### List Payments\n\n**GET** `/payments`\n\nRetrieve a paginated list of payments.\n\n#### Query Parameters\n- `limit` (optional): Number of payments to return (default: 20, max: 100)\n- `starting_after` (optional): Cursor for pagination\n- `ending_before` (optional): Cursor for pagination\n- `status` (optional): Filter by payment status\n- `created` (optional): Filter by creation date range\n\n#### Response\n```json\n{\n  \"data\": [\n    {\n      \"id\": \"pay_1234567890\",\n      \"status\": \"succeeded\",\n      \"amount\": 2999,\n      \"currency\": \"USD\",\n      \"created\": 1640995200,\n      \"description\": \"Premium subscription\"\n    }\n  ],\n  \"has_more\": false,\n  \"total_count\": 1\n}\n```\n\n### Refund Payment\n\n**POST** `/payments/{payment_id}/refunds`\n\nCreate a refund for a payment.\n\n#### Request Body\n```json\n{\n  \"amount\": 2999,\n  \"reason\": \"customer_requested\",\n  \"metadata\": {\n    \"refund_reason\": \"Customer was not satisfied with the service\"\n  }\n}\n```\n\n#### Response\n```json\n{\n  \"id\": \"ref_1234567890\",\n  \"payment_id\": \"pay_1234567890\",\n  \"status\": \"succeeded\",\n  \"amount\": 2999,\n  \"currency\": \"USD\",\n  \"created\": 1640995200,\n  \"reason\": \"customer_requested\"\n}\n```\n\n## Webhooks\n\nConfigure webhooks to receive real-time notifications about payment events.\n\n### Webhook Events\n- `payment.succeeded`: Payment completed successfully\n- `payment.failed`: Payment failed\n- `payment.refunded`: Payment was refunded\n- `payment.dispute.created`: Dispute was created\n- `payment.dispute.closed`: Dispute was resolved\n\n### Webhook Payload\n```json\n{\n  \"id\": \"evt_1234567890\",\n  \"object\": \"event\",\n  \"type\": \"payment.succeeded\",\n  \"data\": {\n    \"object\": {\n      \"id\": \"pay_1234567890\",\n      \"status\": \"succeeded\",\n      \"amount\": 2999\n    }\n  },\n  \"created\": 1640995200\n}\n```\n\n## Error Handling\n\nAll errors follow a consistent format:\n```json\n{\n  \"error\": {\n    \"type\": \"invalid_request_error\",\n    \"code\": \"invalid_payment_method\",\n    \"message\": \"The payment method provided is invalid.\",\n    \"param\": \"payment_method.card.number\",\n    \"request_id\": \"req_1234567890\"\n  }\n}\n```\n\n## SDKs and Libraries\n\nOfficial SDKs are available for:\n- **JavaScript/Node.js**: `npm install @payments/api`\n- **Python**: `pip install payments-api`\n- **Ruby**: `gem install payments-api`\n- **PHP**: `composer require payments/api`\n- **Java**: Available on Maven Central\n- **Go**: `go get github.com/payments/api`\n\n## Testing\n\nUse our test environment for development and testing:\n- **Base URL**: `https://test-api.payments.com/v2.1`\n- **Test API Key**: `pk_test_1234567890`\n- **Test Card Numbers**:\n  - Success: `4242424242424242`\n  - Decline: `4000000000000002`\n  - Insufficient Funds: `4000000000009995`\n\n## Support\n\n- **Documentation**: https://docs.payments.com\n- **API Reference**: https://docs.payments.com/api\n- **Support Email**: api-support@payments.com\n- **Status Page**: https://status.payments.com\n- **Community Forum**: https://community.payments.com\n\n## Changelog\n\n### v2.1.0 (2024-01-15)\n- Added support for SEPA Direct Debit\n- Improved webhook reliability\n- Enhanced error messages\n\n### v2.0.0 (2023-12-01)\n- Major API redesign\n- Improved security features\n- Better rate limiting\n\n### v1.0.0 (2023-06-01)\n- Initial API release\n- Basic payment processing\n- Webhook support",
  "source_type": "auto",
  "metadata": {
    "title": "Payment Processing API v2.1",
    "version": "2.1.0",
    "description": "Comprehensive payment processing API for e-commerce and subscription services",
    "tags": ["payments", "e-commerce", "subscriptions", "fintech"],
    "author": "Payments API Team",
    "created_date": "2024-01-20",
    "api_type": "REST",
    "authentication": "API Key",
    "rate_limiting": true,
    "webhooks": true
  }
}
